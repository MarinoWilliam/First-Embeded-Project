
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080008e  0080008e  0000046e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de3  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cb  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a30  00000000  00000000  000021b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002db  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  0000310b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_vWrite>:
#include <avr/io.h>
#include "std_types.h"


void EEPROM_vWrite(u16 adress, u8 val){
while (((EECR&(1<<EEWE))>>EEWE)==1){}
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <EEPROM_vWrite>
EEARH=(char)(adress>>8);
  96:	9f bb       	out	0x1f, r25	; 31
EEARL=(char)adress;
  98:	8e bb       	out	0x1e, r24	; 30
EEDR=val;
  9a:	6d bb       	out	0x1d, r22	; 29
EECR |=(1<<EEMWE);
  9c:	e2 9a       	sbi	0x1c, 2	; 28
EECR |=(1<<EEWE);
  9e:	e1 9a       	sbi	0x1c, 1	; 28
}
  a0:	08 95       	ret

000000a2 <EEPROM_vRead>:


u8 EEPROM_vRead(u16 adress){
while (((EECR&(1<<EEWE))>>EEWE)==1){}
  a2:	e1 99       	sbic	0x1c, 1	; 28
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <EEPROM_vRead>
EEARH=(char)(adress>>8);
  a6:	9f bb       	out	0x1f, r25	; 31
EEARL=(char)adress;
  a8:	8e bb       	out	0x1e, r24	; 30
EECR |=(1<<EERE);
  aa:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
  ac:	8d b3       	in	r24, 0x1d	; 29
}
  ae:	08 95       	ret

000000b0 <HC05_vInit>:
#include "HC05_driver.h"


void HC05_vInit  (){
	
	UART_vInit(9600);
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	95 e2       	ldi	r25, 0x25	; 37
  b4:	0e 94 c1 01 	call	0x382	; 0x382 <UART_vInit>
}
  b8:	08 95       	ret

000000ba <HC05_vSend>:


void HC05_vSend(u8 data){
	UART_vSend(data);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_vSend>
	
  c0:	08 95       	ret

000000c2 <SendingFallingEdge>:
	SendingFallingEdge();
}
#endif

static void SendingFallingEdge (void){
	SET_BIT(PORTB,EN);
  c2:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <SendingFallingEdge+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <SendingFallingEdge+0xc>
  ce:	00 00       	nop
	_delay_ms(5);
	CLR_BIT(PORTB,EN);
  d0:	c3 98       	cbi	0x18, 3	; 24
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	9e e4       	ldi	r25, 0x4E	; 78
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <SendingFallingEdge+0x14>
  da:	00 c0       	rjmp	.+0      	; 0xdc <SendingFallingEdge+0x1a>
  dc:	00 00       	nop
	_delay_ms(5);
}
  de:	08 95       	ret

000000e0 <Send_cmd>:
	Send_cmd(0x10);
}


#ifdef LCD_4_BIT
static void Send_cmd (u8 cmd){
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
    PORTA &=0x0f;
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd&0xf0);
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	9c 2f       	mov	r25, r28
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	89 2b       	or	r24, r25
  f2:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTB,RS);
  f4:	c1 98       	cbi	0x18, 1	; 24
	SendingFallingEdge();
  f6:	0e 94 61 00 	call	0xc2	; 0xc2 <SendingFallingEdge>
	PORTA &=0x0f;
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd<<4);
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	c2 95       	swap	r28
 104:	c0 7f       	andi	r28, 0xF0	; 240
 106:	c8 2b       	or	r28, r24
 108:	cb bb       	out	0x1b, r28	; 27
	CLR_BIT(PORTB,RS);
 10a:	c1 98       	cbi	0x18, 1	; 24
	SendingFallingEdge();
 10c:	0e 94 61 00 	call	0xc2	; 0xc2 <SendingFallingEdge>
}
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <LCD_vInit>:


void LCD_vInit(void){
	DDRB |= 0x0E;  /*set OUTPUT direction for EN, RS, RW (0000 1110)*/
 114:	87 b3       	in	r24, 0x17	; 23
 116:	8e 60       	ori	r24, 0x0E	; 14
 118:	87 bb       	out	0x17, r24	; 23
	DDRA |=0xF0;            /*data pins*/
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	80 6f       	ori	r24, 0xF0	; 240
 11e:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(PORTB,RW);   /*read*/
 120:	c2 98       	cbi	0x18, 2	; 24
	Send_cmd(0x33); /*initialization*/
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	Send_cmd(0x32);
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	Send_cmd(0x28);	
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	Send_cmd(0x01); /*clear screen*/
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	Send_cmd(0x0f); /* blink curser*/
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	99 ef       	ldi	r25, 0xF9	; 249
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	a0 40       	sbci	r26, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <LCD_vInit+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_vInit+0x3c>
 150:	00 00       	nop
	_delay_ms(20);
}
 152:	08 95       	ret

00000154 <LCD_vSend_data>:


void LCD_vSend_data(u8 data){
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
    PORTA &=0x0f;
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	8b bb       	out	0x1b, r24	; 27
    PORTA|=(data&0xf0);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	9c 2f       	mov	r25, r28
 162:	90 7f       	andi	r25, 0xF0	; 240
 164:	89 2b       	or	r24, r25
 166:	8b bb       	out	0x1b, r24	; 27
    SET_BIT(PORTB,RS);
 168:	c1 9a       	sbi	0x18, 1	; 24
    SendingFallingEdge();
 16a:	0e 94 61 00 	call	0xc2	; 0xc2 <SendingFallingEdge>
    PORTA &=0x0f;
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	8b bb       	out	0x1b, r24	; 27
    PORTA|=(data<<4);
 174:	8b b3       	in	r24, 0x1b	; 27
 176:	c2 95       	swap	r28
 178:	c0 7f       	andi	r28, 0xF0	; 240
 17a:	c8 2b       	or	r28, r24
 17c:	cb bb       	out	0x1b, r28	; 27
    SET_BIT(PORTB,RS);
 17e:	c1 9a       	sbi	0x18, 1	; 24
    SendingFallingEdge();
 180:	0e 94 61 00 	call	0xc2	; 0xc2 <SendingFallingEdge>
    
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LCD_vDelete>:

static void SendingFallingEdge (void);
static void Send_cmd (u8 cmd);
#define  LCD_4_BIT
void LCD_vDelete(void){
	Send_cmd(0x10);
 188:	80 e1       	ldi	r24, 0x10	; 16
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	LCD_vSend_data(' ');
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vSend_data>
	Send_cmd(0x10);
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
}
 19a:	08 95       	ret

0000019c <LCD_vPrint>:
	CLR_BIT(PORTB,EN);
	_delay_ms(5);
}


void LCD_vPrint( u8 * str){
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
	while (*str){
 1a2:	88 81       	ld	r24, Y
 1a4:	88 23       	and	r24, r24
 1a6:	31 f0       	breq	.+12     	; 0x1b4 <LCD_vPrint+0x18>
	CLR_BIT(PORTB,EN);
	_delay_ms(5);
}


void LCD_vPrint( u8 * str){
 1a8:	21 96       	adiw	r28, 0x01	; 1
	while (*str){
		LCD_vSend_data(*str);
 1aa:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vSend_data>
	_delay_ms(5);
}


void LCD_vPrint( u8 * str){
	while (*str){
 1ae:	89 91       	ld	r24, Y+
 1b0:	88 23       	and	r24, r24
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <LCD_vPrint+0xe>
		LCD_vSend_data(*str);
		str++;
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCD_vClearScreen>:

void LCD_vClearScreen(void){
	Send_cmd(0x01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
}
 1c0:	08 95       	ret

000001c2 <LCD_vMoveCurser>:

void LCD_vMoveCurser(u8 row , u8 column){
	u8 temp;
	if(row==0){
 1c2:	88 23       	and	r24, r24
 1c4:	19 f4       	brne	.+6      	; 0x1cc <LCD_vMoveCurser+0xa>
		temp=0x80+column;
 1c6:	86 2f       	mov	r24, r22
 1c8:	80 58       	subi	r24, 0x80	; 128
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <LCD_vMoveCurser+0xe>
	}
	else{
		temp=0xc0+column;
 1cc:	86 2f       	mov	r24, r22
 1ce:	80 54       	subi	r24, 0x40	; 64
	}
	Send_cmd(temp);
 1d0:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
}
 1d4:	08 95       	ret

000001d6 <LCD_vhide>:



void LCD_vhide(){
	Send_cmd(0x10);
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <Send_cmd>
	LCD_vSend_data('*');
 1dc:	8a e2       	ldi	r24, 0x2A	; 42
 1de:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vSend_data>
	//Send_cmd(0x10);
 1e2:	08 95       	ret

000001e4 <main>:

u8 pass=0;

int main(void)
{
	System_Init();
 1e4:	0e 94 2a 01 	call	0x254	; 0x254 <System_Init>
	Set_Password();
 1e8:	0e 94 32 01 	call	0x264	; 0x264 <Set_Password>
	
	do
	{	
		pass=Pass_Check();	
 1ec:	0e 94 47 01 	call	0x28e	; 0x28e <Pass_Check>
 1f0:	80 93 8e 00 	sts	0x008E, r24
	}
	while (pass!=1);
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	d1 f7       	brne	.-12     	; 0x1ec <main+0x8>
 
	LCD_vClearScreen();
 1f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_vClearScreen>
	LCD_vPrint("Choose a Room");
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_vPrint>
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	99 e6       	ldi	r25, 0x69	; 105
 208:	a8 e1       	ldi	r26, 0x18	; 24
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	a0 40       	sbci	r26, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x26>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x30>
 214:	00 00       	nop
	_delay_ms(500);
	LCD_vClearScreen();
 216:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_vClearScreen>

    while(1)
    {
		

        if(data_recived==1){
 21a:	80 91 90 00 	lds	r24, 0x0090
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x36>
	        data_recived=0;	
 222:	10 92 90 00 	sts	0x0090, r1
	        SPI_vMaster_transmit(rxdata);
 226:	80 91 8f 00 	lds	r24, 0x008F
 22a:	0e 94 b0 01 	call	0x360	; 0x360 <SPI_vMaster_transmit>
 22e:	f5 cf       	rjmp	.-22     	; 0x21a <main+0x36>

00000230 <__vector_13>:
        }
    }
}


ISR(USART_RXC_vect){
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
	data_recived=1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 90 00 	sts	0x0090, r24
	rxdata=UDR;
 242:	8c b1       	in	r24, 0x0c	; 12
 244:	80 93 8f 00 	sts	0x008F, r24
}
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <System_Init>:

volatile extern u8 data_recived;
volatile extern u8 rxdata;

void System_Init (){
		HC05_vInit();
 254:	0e 94 58 00 	call	0xb0	; 0xb0 <HC05_vInit>
		SPI_vInit_Master();
 258:	0e 94 a5 01 	call	0x34a	; 0x34a <SPI_vInit_Master>
		sei();
 25c:	78 94       	sei
		LCD_vInit();	
 25e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_vInit>
}
 262:	08 95       	ret

00000264 <Set_Password>:



void Set_Password(){
		EEPROM_vWrite(0x00,1);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_vWrite>
		EEPROM_vWrite(0x01,2);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_vWrite>
		EEPROM_vWrite(0x02,3);
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_vWrite>
		EEPROM_vWrite(0x03,4);
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_vWrite>
}
 28c:	08 95       	ret

0000028e <Pass_Check>:


u8 Pass_Check (){
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	u8 valid=1;
		LCD_vClearScreen();
 294:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_vClearScreen>
		LCD_vPrint("Password");
 298:	8e e6       	ldi	r24, 0x6E	; 110
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_vPrint>
		LCD_vMoveCurser(1,0);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_vMoveCurser>
		
		u8*p2 = 0x04;
 2ac:	c4 e0       	ldi	r28, 0x04	; 4
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
		for(u8 i=0;i<4;i++){
		while (data_recived==0){}
 2b0:	80 91 90 00 	lds	r24, 0x0090
 2b4:	88 23       	and	r24, r24
 2b6:	e1 f3       	breq	.-8      	; 0x2b0 <Pass_Check+0x22>
		data_recived=0;
 2b8:	10 92 90 00 	sts	0x0090, r1
		EEPROM_vWrite(p2,rxdata-48);
 2bc:	60 91 8f 00 	lds	r22, 0x008F
 2c0:	60 53       	subi	r22, 0x30	; 48
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_vWrite>
		LCD_vSend_data(rxdata);
 2c8:	80 91 8f 00 	lds	r24, 0x008F
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vSend_data>
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	34 e3       	ldi	r19, 0x34	; 52
 2d6:	4c e0       	ldi	r20, 0x0C	; 12
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	30 40       	sbci	r19, 0x00	; 0
 2dc:	40 40       	sbci	r20, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <Pass_Check+0x4a>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Pass_Check+0x54>
 2e2:	00 00       	nop
		_delay_ms(250);
		LCD_vhide();
 2e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_vhide>
		++p2;
 2e8:	21 96       	adiw	r28, 0x01	; 1
		LCD_vClearScreen();
		LCD_vPrint("Password");
		LCD_vMoveCurser(1,0);
		
		u8*p2 = 0x04;
		for(u8 i=0;i<4;i++){
 2ea:	c8 30       	cpi	r28, 0x08	; 8
 2ec:	d1 05       	cpc	r29, r1
 2ee:	01 f7       	brne	.-64     	; 0x2b0 <Pass_Check+0x22>
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
		++p2;
	}
	u8* p1 =0x00;
	p2 =0x04;
	for(u8 i=0;i<4;i++){
		if(EEPROM_vRead(p1)!=EEPROM_vRead(p2)){
 2f4:	ce 01       	movw	r24, r28
 2f6:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_vRead>
 2fa:	18 2f       	mov	r17, r24
 2fc:	ce 01       	movw	r24, r28
 2fe:	04 96       	adiw	r24, 0x04	; 4
 300:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_vRead>
 304:	18 17       	cp	r17, r24
 306:	29 f4       	brne	.+10     	; 0x312 <Pass_Check+0x84>
			valid=0;
			break;
		}
		p1++;
 308:	21 96       	adiw	r28, 0x01	; 1
		LCD_vhide();
		++p2;
	}
	u8* p1 =0x00;
	p2 =0x04;
	for(u8 i=0;i<4;i++){
 30a:	c4 30       	cpi	r28, 0x04	; 4
 30c:	d1 05       	cpc	r29, r1
 30e:	91 f7       	brne	.-28     	; 0x2f4 <Pass_Check+0x66>
 310:	14 c0       	rjmp	.+40     	; 0x33a <Pass_Check+0xac>
		p1++;
		p2++;
	}
	
	if (valid!=1){
		LCD_vClearScreen();
 312:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_vClearScreen>
		LCD_vPrint("Access Denied");
 316:	87 e7       	ldi	r24, 0x77	; 119
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_vPrint>
	}
	u8* p1 =0x00;
	p2 =0x04;
	for(u8 i=0;i<4;i++){
		if(EEPROM_vRead(p1)!=EEPROM_vRead(p2)){
			valid=0;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	33 ed       	ldi	r19, 0xD3	; 211
 324:	40 e3       	ldi	r20, 0x30	; 48
 326:	21 50       	subi	r18, 0x01	; 1
 328:	30 40       	sbci	r19, 0x00	; 0
 32a:	40 40       	sbci	r20, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <Pass_Check+0x98>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <Pass_Check+0xa2>
 330:	00 00       	nop
	
	_delay_ms(1000);
	
	
	return valid ;
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	08 95       	ret
	if (valid!=1){
		LCD_vClearScreen();
		LCD_vPrint("Access Denied");
	}
	else {
		LCD_vClearScreen();
 33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_vClearScreen>
		LCD_vPrint("Welcome");
 33e:	85 e8       	ldi	r24, 0x85	; 133
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_vPrint>
		EEPROM_vWrite(0x03,4);
}


u8 Pass_Check (){
	u8 valid=1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	eb cf       	rjmp	.-42     	; 0x320 <Pass_Check+0x92>

0000034a <SPI_vInit_Master>:

void SPI_vInit_Master (void)
{
	
	/*master or slave ?*/
	SET_BIT(SPCR,MSTR);
 34a:	6c 9a       	sbi	0x0d, 4	; 13
	
	/*clock speed*/
	SET_BIT(SPCR,SPR0);
 34c:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPR1);
 34e:	69 9a       	sbi	0x0d, 1	; 13
	CLR_BIT(SPSR,SPI2X);
 350:	70 98       	cbi	0x0e, 0	; 14
		
	/*configure DDR ss, mosi , miso , sck */
	SET_BIT(DDRB,SS);
 352:	bc 9a       	sbi	0x17, 4	; 23
	SET_BIT(DDRB,MOSI);
 354:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(DDRB,MISO);
 356:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(DDRB,SCK);
 358:	bf 9a       	sbi	0x17, 7	; 23
	
	/*make ss high (enaable the selection witg 0 in the app)*/
	
	SET_BIT(PORTB,SS);
 35a:	c4 9a       	sbi	0x18, 4	; 24
   
   
   /*enaple SPI prepheral*/
	SET_BIT(SPCR,SPE);
 35c:	6e 9a       	sbi	0x0d, 6	; 13
}
 35e:	08 95       	ret

00000360 <SPI_vMaster_transmit>:

void SPI_vMaster_transmit (char data){
	
	/*enable ss*/
	CLR_BIT(PORTB,SS);
 360:	c4 98       	cbi	0x18, 4	; 24
	/*put data t SPDR*/
	SPDR=data;
 362:	8f b9       	out	0x0f, r24	; 15
	/*check transimtion is done*/
	/*won't be able to check at rhe begining because it is set to one after first */
	while (READ_BIT(SPSR,SPIF)==0){
 364:	77 9b       	sbis	0x0e, 7	; 14
 366:	fe cf       	rjmp	.-4      	; 0x364 <SPI_vMaster_transmit+0x4>
		/*wait*/
	}
	/*close SS */
	SET_BIT(PORTB,SS);
 368:	c4 9a       	sbi	0x18, 4	; 24
}
 36a:	08 95       	ret

0000036c <SPI_vInit_Slave>:

void SPI_vInit_Slave (void){
	/*master or slave ?*/
	CLR_BIT(SPCR,MSTR);
 36c:	6c 98       	cbi	0x0d, 4	; 13
	
	/*configure DDR ss, mosi , miso , sck */
	CLR_BIT(DDRB,SS);
 36e:	bc 98       	cbi	0x17, 4	; 23
	CLR_BIT(DDRB,MOSI);
 370:	bd 98       	cbi	0x17, 5	; 23
	SET_BIT(DDRB,MISO);
 372:	be 9a       	sbi	0x17, 6	; 23
	CLR_BIT(DDRB,SCK);
 374:	bf 98       	cbi	0x17, 7	; 23
	
      /*enaple SPI prepheral*/
      SET_BIT(SPCR,SPE);
 376:	6e 9a       	sbi	0x0d, 6	; 13
}
 378:	08 95       	ret

0000037a <SPI_u8Slave_recive>:


char SPI_u8Slave_recive(void){
	    	/*check transimtion is done*/
		while (READ_BIT(SPSR,SPIF)==0){
 37a:	77 9b       	sbis	0x0e, 7	; 14
 37c:	fe cf       	rjmp	.-4      	; 0x37a <SPI_u8Slave_recive>
			/*wait*/
		}
		return SPDR;
 37e:	8f b1       	in	r24, 0x0f	; 15
	
}
 380:	08 95       	ret

00000382 <UART_vInit>:
void UART_vInit(u32  baud)
{
/*Set band rate in UBRRL  UBRRH*/
u16 temp =((160000/(16*96))-1);

UBRRL=(u8) temp;
 382:	87 e6       	ldi	r24, 0x67	; 103
 384:	89 b9       	out	0x09, r24	; 9
UBRRH=(u8) (temp >>8);
 386:	10 bc       	out	0x20, r1	; 32

/*choose frame (enable controlling UREC register ) (8 bit)  (one stop bit)   (no parity)*/
UCSRC = (1<<URSEL);  // clear everything else
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	80 bd       	out	0x20, r24	; 32

SET_BIT(UCSRC,UCSZ0);
 38c:	90 b5       	in	r25, 0x20	; 32
 38e:	92 60       	ori	r25, 0x02	; 2
 390:	90 bd       	out	0x20, r25	; 32
SET_BIT(UCSRC,UCSZ1);
 392:	90 b5       	in	r25, 0x20	; 32
 394:	94 60       	ori	r25, 0x04	; 4
 396:	90 bd       	out	0x20, r25	; 32

/*enable interrupt reception */
UCSRB = (1<<RXCIE);    // clear everything else
 398:	8a b9       	out	0x0a, r24	; 10


/*enable UART Rx Tx*/
SET_BIT(UCSRB,TXEN);
 39a:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);
 39c:	54 9a       	sbi	0x0a, 4	; 10
}
 39e:	08 95       	ret

000003a0 <UART_vSend>:


void UART_vSend(u8 data){
	
	while (READ_BIT(UCSRA,UDRE)==0){
 3a0:	5d 9b       	sbis	0x0b, 5	; 11
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <UART_vSend>
		/*wait*/
	}
	UDR=data;
 3a4:	8c b9       	out	0x0c, r24	; 12
}
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
